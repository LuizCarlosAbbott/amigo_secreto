{"version":3,"sources":["components/Persons/Persons.js","components/PersonsTable/PersonsTable.js","containers/App.js","index.js"],"names":["DELETE_PERSON","gql","UPDATE_PERSON","Persons","props","useMutation","deletePerson","updatePerson","useState","rIndex","setIndex","nameChange","setName","emailChange","setEmail","data","persons","map","index","id","name","email","friend","key","className","value","onChange","e","target","onClick","style","backgroundColor","variables","input","row","document","getElementById","parentNode","removeChild","personsTable","loading","error","PERSONS","CREATE_PERSON","SORT_FRIEND","App","useQuery","update","cache","createPerson","readQuery","query","writeQuery","concat","sortFriend","pop","size","type","placeholder","PersonsTable","href","client","ApolloClient","uri","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0dcf8854.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FaTrash, FaPencilAlt, FaSave } from \"react-icons/fa\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport \"./Persons.css\";\n\nconst DELETE_PERSON = gql`\n  mutation deletePerson($id: String!) {\n    deletePerson(id: $id) {\n      id\n      name\n      email\n    }\n  }\n`;\n\nconst UPDATE_PERSON = gql`\n  mutation updatePerson($id: String!, $input: PersonInput!) {\n    updatePerson(id: $id, input: $input) {\n      id\n      name\n      email\n    }\n  }\n`;\n\nfunction Persons(props) {\n  const [deletePerson] = useMutation(DELETE_PERSON);\n  const [updatePerson] = useMutation(UPDATE_PERSON);\n  const [rIndex, setIndex] = useState(-1);\n  const [nameChange, setName] = useState(\"\");\n  const [emailChange, setEmail] = useState(\"\");\n\n  return props.data.persons.map(({ id, name, email, friend }, index) => {\n    return (\n      <tr key={id} id={id}>\n        <td>\n          {rIndex !== index ? (\n            name\n          ) : (\n            <input\n              className=\"Fade\"\n              value={nameChange}\n              onChange={(e) => setName(e.target.value)}\n            />\n          )}\n        </td>\n        <td>\n          {rIndex !== index ? (\n            email\n          ) : (\n            <input\n              className=\"Fade\"\n              value={emailChange}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          )}\n        </td>\n        <td>{friend}</td>\n        <td>\n          <button\n            className=\"btn btn-warning Fade\"\n            onClick={() => {\n              if (rIndex === index) {\n                setIndex(-1);\n              } else {\n                setIndex(index);\n                setName(name);\n                setEmail(email);\n              }\n            }}\n          >\n            <FaPencilAlt style={{ backgroundColor: \"#fbc118\" }} />\n          </button>\n          {rIndex === index ? (\n            <button\n              className=\"btn btn-success ml-2 Fade\"\n              onClick={() => {\n                updatePerson({\n                  variables: {\n                    id,\n                    input: { name: nameChange, email: emailChange },\n                  },\n                });\n                setIndex(-1);\n              }}\n            >\n              <FaSave style={{ backgroundColor: \"#57a845\" }} />\n            </button>\n          ) : null}\n          <button\n            className=\"btn btn-danger ml-2 Fade\"\n            onClick={() => {\n              deletePerson({ variables: { id } });\n              const row = document.getElementById(id);\n              row.parentNode.removeChild(row);\n            }}\n          >\n            <FaTrash style={{ backgroundColor: \"#dd4b44\" }} />\n          </button>\n        </td>\n      </tr>\n    );\n  });\n}\n\nexport default Persons;\n","import React from \"react\";\nimport Persons from \"../Persons/Persons\";\nimport \"./PersonTable.css\";\n\nconst personsTable = (props) => {\n  if (props.loading) return <p>Loading...</p>;\n  if (props.error) return <p>Error 1:(</p>;\n\n  return (\n    <table className=\"PersonTable\">\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>E-mail</th>\n          <th>Amigo</th>\n          <th>Ações</th>\n        </tr>\n      </thead>\n      <tbody>{<Persons data={props.data} />}</tbody>\n    </table>\n  );\n};\n\nexport default personsTable;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState } from \"react\";\nimport PersonsTable from \"../components/PersonsTable/PersonsTable\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { FaGifts, FaArrowRight } from \"react-icons/fa\";\nimport \"./App.css\";\n\nconst PERSONS = gql`\n  {\n    persons {\n      id\n      name\n      email\n      friend\n    }\n  }\n`;\n\nconst CREATE_PERSON = gql`\n  mutation createPerson($input: PersonInput!) {\n    createPerson(input: $input) {\n      id\n      name\n      email\n      friend\n    }\n  }\n`;\n\nconst SORT_FRIEND = gql`\n  mutation sortFriend {\n    sortFriend {\n      id\n      name\n      email\n      friend\n    }\n  }\n`;\n\nfunction App() {\n  const { loading, error, data } = useQuery(PERSONS);\n  const [createPerson] = useMutation(CREATE_PERSON, {\n    update(cache, { data: { createPerson } }) {\n      const { persons } = cache.readQuery({ query: PERSONS });\n      cache.writeQuery({\n        query: PERSONS,\n        data: { persons: persons.concat([createPerson]) },\n      });\n    },\n  });\n  const [sortFriend] = useMutation(SORT_FRIEND, {\n    update(cache, { data: { sortFriend } }) {\n      const { persons } = cache.readQuery({ query: PERSONS });\n      cache.writeQuery({\n        query: PERSONS,\n        data: { persons: persons.concat([sortFriend]).pop() },\n      });\n    },\n  });\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  return (\n    <div className=\"Geral\">\n      <div className=\"Logo\">\n        <FaGifts size={150} className=\"icon\" />\n        <div className=\"form\">\n          <div className=\"row\">\n            <div className=\"col12 col-md-6\">\n              <div className=\"form-group\">\n                <label>Nome</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  placeholder=\"Digite o nome...\"\n                />\n              </div>\n            </div>\n\n            <div className=\"col-12 col-md-6\">\n              <div className=\"form-group\">\n                <label>E-mail</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Digite o e-mail...\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <hr />\n          <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-end\">\n              <button\n                className=\"btn btn-primary\"\n                onClick={(e) =>\n                  createPerson({ variables: { input: { name, email } } })\n                }\n              >\n                Adicionar a lista\n              </button>\n\n              <button\n                className=\"btn btn-secondary ml-2\"\n                onClick={(e) => {\n                  setEmail(\"\");\n                  setName(\"\");\n                }}\n              >\n                Cancelar\n              </button>\n              <button\n                className=\"btn btn-success ml-2\"\n                onClick={() => sortFriend()}\n              >\n                Sortear e enviar email\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"App\">\n        <PersonsTable data={data} loading={loading} error={error} />\n      </div>\n      <div className=\"Footer\">\n        Produzido com carinho por Luiz Carlos - para ver o código &nbsp; {\"  \"}\n        <a href=\"https://github.com/LuizCarlosAbbott/ad-2019/\">\n          {\" \"}\n          acesse\n          <FaArrowRight />\n        </a>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst client = new ApolloClient({\n  uri:\n    \"https://salty-escarpment-39557.herokuapp.com/graphql/\" +\n    \"http://luizcarlosabbott.github.io/amigo_secreto\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}